Detector=gg.getFile():match("[^/]+$")Name=".lua"ifDetector==NamethenelseError="print(Error)returngg.setVisible(true)LuaLibraryTool=1gg.sleep(0);functionTheEnd();localAlert=gg.alert("\n\n","","","");ifAlert==3then;gg.setVisible(false);os.exit();end;ifAlert==1then;gg.setVisible(false);gg.toast("")gg.sleep(0);end;end;TheEnd()################################INDONESIADECRYPTOR################################gg.alert("\n\n.","","","functionHOME()MENU=gg.choice({"""},nil,(os.date([[:%d/%m/%Y:%H:%M@@:https://t.me/kmkz101]]])))ifMENU==nilthenelseifMENU==1thenHttpCustom()endifMENU==2thendecrypthttpinjet()endifMENU==3thenBASE()endendLuaLibraryTool=1################################KMKZINDONESIADECRYPTOR################################functionHttpCustom()limit=falsefunctionrwmem(Address,SizeOrBuffer)assert(Address~=nil,"[rwmem]:error,providedaddressisnil.")_rw={}iftype(SizeOrBuffer)=="number"then_=""dodofor_FORV_5_=1,SizeOrBufferdo_rw[_FORV_5_]={address=Address1+_FORV_5_,flags=gg.TYPE_BYTE}endendenddodofor_FORV_5_,_FORV_6_inipairs(gg.getValues(_rw))doif_FORV_6_.value==0andlimit==truethenreturn_end_=_..string.format("%02X",_FORV_6_.value&255)endendendreturn_endByte={}SizeOrBuffer:gsub("..",function(x)Byte[#Byte+1]=x_rw[#Byte]={address=Address1+#Byte,flags=gg.TYPE_BYTE,value=x.."h"}end)gg.setValues(_rw)endfunctionhexdecode(hex)return(hex:gsub("%x%x",function(digits)returnstring.char(tonumber(digits,16))end))endfunctionhexencode(str)return(str:gsub(".",function(char)returnstring.format("%2x",char:byte())end))endfunctionDec2Hex(nValue)nHexVal=string.format("%X",nValue)sHexVal=nHexVal..""returnsHexValendfunctionToInteger(number)returnmath.floor(tonumber(number)orerror("Couldnotcast'"..tostring(number).."'tonumber.'"))end================================================================================functionsave(data)localfunctionhexencode_spasi(str)return(str:gsub(".",function(char)returnstring.format("%02x",char:byte())end))endlocalfunctioncheckMatch(key,str)result=nilforindex,valueinipairs(key)doresult=str:match(value)ifresultthenbreakendendreturnresultendlocalfunctionstrip(s)return(s:gsub("^%s*(.)%s*$","%1"))endlocalfunctionprosesData(data)localfunctionfindExpDate(tbl)localkey={"%d%d%d%d[\45]%d%d[\45]%d%d[\32]%d%d[\58]%d%d","lifeTime"}localresult=nilforindex_tbl,value_tblinipairs(tbl)doforindex_key,value_keyinipairs(key)doifvalue_tbl:match(value_key)thenresult=index_tblendendendreturnresultendlocalfunctionsplitString(str,separator)localmatch_1,match_2=str:match("(.)"..separator.."(.*)")localtbl={}no=1while(match_2:match("(.)"..separator.."(.*)")andno<1000)domatch_1,match_2=match_2:match("(.)"..separator.."(.*)")ifhexdecode(match_1):match("[^\x20]+")thenprint(no..":"..strip(hexdecode(match_1):gsub("[^\x20\x7e]+","")))table.insert(tbl,strip(hexdecode(match_1):gsub("[^\x20\x7e]+","")))elseprint(no..":Empty")table.insert(tbl,"N/A")endprint()no=no+1print(hexdecode(match_1):gsub("[^\x20\x7e]+",""))endreturntblendlocalfunctionfixedConfig(index,tbl)localresult_fixedConfig={}localbeginIndex=index4locallastIndex=beginIndex+31fori=beginIndex,lastIndexdotable.insert(result_fixedConfig,tbl[i])endreturnresult_fixedConfigenddata=hexencode_spasi(data)data=data:gsub("00","20")data=data:gsub("20","z")data=data:gsub("66616c7365","FALSE")data=data:gsub("\x20","")data=data:gsub("\n","")localseparator=data:match("FALSE[\x7a]+(.)[\x7a]+")data=data:gsub(separator,"0a56616c647947616e74656e67")separator="0a56616c647947616e74656e67"data=data:gsub("z","20")data=data:gsub("FALSE","66616c7365")localresult=splitString(data,separator)localassemblyPointIndex=findExpDate(result)localgetConfig=fixedConfig(assemblyPointIndex,result)returngetConfigendjlocalfunctiongetOutput(tbl)localcfgRegex={[1]={["name"]="[Payload]",["regex"]="[azAZ]+[\x20]+.*[\x5bcrlf\x5d]+"},[5]={["name"]="[ExpireTime]",["regex"]="(.*)"},[7]={["name"]="[Notes]",["regex"]="(.*)"},[8]={["name"]="[SSHAdress]",["regex"]="[09azAZx\x2e\x2d]+:[%d]+@[%w\x2e\x2d]+:[%w]+"},[2]={["name"]="[Proxy]",["regex"]="[%w\x2e]+[\x3a][%d]+"},[13]={["name"]="[SNI]",["regex"]="[%w\x2e\x2d]+[\x2e]+[%w]+"},[25]={["name"]="[Psiphon]",["regex"]="(.*)"},[27]={["name"]="[v2Ray]",["regex"]="(.*)"},[30]={["name"]="[NameServer]",["regex"]="[%w\x2e\x2d]+[\x2e]+[%w]+"},[31]={["name"]="PubKey]",["regex"]="(.*)"},[32]={["name"]="[DNSHost]",["regex"]="[%w\x2e\x2d]+[\x2e]+[%w]+"},[31]={["name"]="[OpenVpn]",["regex"]="(.*)"},[33]={["name"]="[Hwid]",["regex"]="(.*)"},[34]={["name"]="[passLocked]",["regex"]="(.*)"}}localmessage="!\n\n"forindex,valueinipairs(tbl)doifcfgRegex[index]andvalue:match(cfgRegex[index]["regex"])thenlocalnamaKonten=cfgRegex[index]["name"]localvalueRegexKonten=value:match(cfgRegex[index]["regex"])print(namaKonten..""..valueRegexKonten.."\n\n")message=message..namaKonten..""..valueRegexKonten.."\n\n"endendmessage=message.."returnmessageendlocalcontentToDecrypt=hexdecode(data)contentToDecrypt=prosesData(hexdecode(data))localhasil=getOutput(contentToDecrypt)io.open(gg.EXT_STORAGE.."/decrypt.txt","w"):write(data)gg.alert(hasil)gg.copyText(hasil,false)gg.toast("DecryptSuccessAndResultCopiedToClipboard..!!")endgg.setRanges(gg.REGION_JAVA_HEAP)gg.searchNumber(":GET/HTTP/",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("MethodGET")hc_method2=trueendifhc_method2thengg.searchNumber("Host:",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("Host:")hc_method3=trueendendifhc_method3thengg.searchNumber(":inbounds",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("inbounds")hc_method4=trueendendifhc_method4thengg.searchNumber(":[crlf]",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("[crlf]")hc_method5=trueendendifhc_method5thengg.searchNumber("Upgrade:websocket",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("Upgrade:webso")hc_method6=trueendendifhc_method6thengg.searchNumber(":GETwss:",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("GETwss")hc_method7=trueendendifhc_method7thengg.searchNumber(":[splitPsiphon][splitPsiphon]",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("splitPsiphon")hc_method8=trueendendifhc_method8thengg.searchNumber(":[splitPsiphon]",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("[ey")hc_metho9=trueendendifhc_method9thengg.searchNumber(":b",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("splitPsiphon")hc_method10=trueendendifhc_method10thenprint("Allmethodsfailed")os.exit()endlocalr=gg.getResults(11)iflimit==falsethenr[1].address=r[1].address5376endreadedMem=rwmem(r[1].address,10000)save(readedMem)gg.clearResults()","################################INDONESIADECRYPTOR################################Telegram:@@###################################################################DeceyphttpinjetorScrypt###################################################################functiondecrypthttpinjet()limit=falsetargetInfo=gg.getTargetInfo()app=targetInfo.packageNamelocalutf8={}localbit={data32={}doforSRD1_5_=1,32dobit.data32[SRD1_5_]=2^(32SRD1_5_)endendlocaltoby=string.bytefunctionutf8.charbytes(s,i)i=ior1localc=string.byte(s,i)ifc>0andc<=127thendoreturn1endreturnendifc>=194andc<=223thendoreturn2endreturnendifc>=224andc<=239thendoreturn3endreturnendifc>=240andc<=244thenreturn4endreturn1localdedfunctionbit:d2b(arg)ifarg==nilthenreturnendlocaltr,c={},arg<0ifcthenarg=0argenddodoforSRD1_7_=1,32doifarg>=self.data32[SRD1_7_]thentr[SRD1_7_]=1arg=argself.data32[SRD1_7_]elsetr[SRD1_7_]=0endendendendifcthentr=self:_bnot(tr)tr=self:b2d(tr)+1tr=self:d2b(tr)endreturntrfunctionbit:b2d(arg,neg)localnr=0ifarg[1]==1andneg==truethenarg=self:_bnot(arg)nr=self:b2d(arg)+1nr=0nrelsedoforSRD1_7_=1,32doifarg[SRD1_7_]==1thennr=nr+2^(32SRD1_7_)endendendendreturnnrfunctionbit:_and(a,b)localop1=self:d2b(a)localop2=self:d2b(b)localr={}dodoforSRD1_9_=1,32doifop1[SRD1_9_]==1andop2[SRD1_9_]==1thenr[SRD1_9_]=1elser[SRD1_9_]=0endendendendreturnself:b2d(r,true)functionbit:_or(a,b)localop1=self:d2b(a)localop2=self:d2b(b)localr={}dodoforSRD1_9_=1,32doifop1[SRD1_9_]==1orop2[SRD1_9_]==1thenr[SRD1_9_]=1elser[SRD1_9_]=0endendendendreturnself:b2d(r,true)functionbit:_xor(a,b)localop1=self:d2b(a)ifop1==nilthenreturnnilendlocalop2=self:d2b(b)ifop2==nilthenreturnnilendlocalr={}dodoforSRD1_9_=1,32doifop1[SRD1_9_]==op2[SRD1_9_]thenr[SRD1_9_]=0elser[SRD1_9_]=1endendendendreturnself:b2d(r,true)localswitch={[1]=function(s,pos)localc1=toby(s,pos)returnc1end[2]=function(s,pos)localc1=toby(s,pos)localc2=toby(s,pos+1)localint1=bit:_and(31,c1)localint2=bit:_and(63,c2)returnbit:_or(bit:_lshift(int1,6),int2)end[3]=function(s,pos)localc1=toby(s,pos)localc2=toby(s,pos+1)localc3=toby(s,pos+2)localint1=bit:_and(15,c1)localint2=bit:_and(63,c2)localint3=bit:_and(63,c3)localo2=bit:_or(bit:_lshift(int1,12),bit:_lshift(int2,6))localdt=bit:_or(o2,int3)returndtend[4]=function(s,pos)localc1=toby(s,pos)localc2=toby(s,pos+1)localc3=toby(s,pos+2)localc4=toby(s,pos+3)localint1=bit:_and(15,c1)localint2=bit:_and(63,c2)localint3=bit:_and(63,c3)localint4=bit:_and(63,c4)localo2=bit:_or(bit:_lshift(int1,18),bit:_lshift(int2,12))localo3=bit:_or(o2,bit:_lshift(int3,6))localo4=bit:_or(o3,int4)returno4endfunctionbit:_bnot(op1)localr={}dodoforSRD1_6_=1,32doifop1[SRD1_6_]==1thenr[SRD1_6_]=0elser[SRD1_6_]=1endendendendreturnrfunctionbit:_not(a)localop1=self:d2b(a)localr=self:_bnot(op1)returnself:b2d(r,true)functionbit:charCodeAt(s)localpos,int,H,L=1,0,0,0localslen=string.len(s)localallByte={}whilepos<=slendolocaltLen=utf8.charbytes(s,pos)iftLen>=1andtLen<=4theniftLen==4thenint=switch[4](s,pos)H=math.floor((int65536)/1024)+55296L=(int65536)%1024+56320table.insert(allByte,H)table.insert(allByte,L)elseint=switch[tLen](s,pos)table.insert(allByte,int)endendpos=pos+tLenendreturnallBytefunctionbit:_rshift(a,n)localr=0ifa<0thenr=0self:_frshift(0a,n)elseifa>=0thenr=self:_frshift(a,n)endreturnrfunctionbit:_frshift(a,n)localop1=self:d2b(a)localr=self:d2b(0)localleft=32nifn<32andn>0thendoforSRD1_9_=left,1,1dor[SRD1_9_+n]=op1[SRD1_9_]endendendreturnself:b2d(r)functionbit:_lshift(a,n)localop1=self:d2b(a)localr=self:d2b(0)ifn<32andn>0thendoforSRD1_8_=n,31dor[SRD1_8_n+1]=op1[SRD1_8_+1]endendendreturnself:b2d(r,true)functiontrim(s)returns:match("^%s*(.*)"):match("(.)%s*$")localjson={}localkind_of=function(obj)iftype(obj)~="table"thenreturntype(obj)endlocali=1dodoforSRD1_5_inpairs(obj)doifobj[i]~=niltheni=i+1elsereturn"table"endendendendifi==1thendoreturn"table"endreturnendreturn"array"localescape_str=function(s)localin_char={"\\","\"","/","\b","\f","\n","\r","\t"localout_char={"\\","\"","/","b","f","n","r","t"dodoforSRD1_6_,SRD1_7_inipairs(in_char)dos=s:gsub(SRD1_7_,"\\"..out_char[SRD1_6_])endendendreturnslocalskip_delim=function(str,pos,delim,err_if_missing)pos=pos+#str:match("^%s*",pos)ifstr:sub(pos,pos)~=delimtheniferr_if_missingthenerror("Esperado"..delim.."posioprxima"..pos)endreturnpos,falseendreturnpos+1,truelocalfunctionparse_str_val(str,pos,val)val=valor""localearly_end_error="Fimdaentradaencontradoduranteaanlisedastring."ifpos>#strthenerror(early_end_error)endlocalc=str:sub(pos,pos)ifc=="\""thenreturnval,pos+1endifc~="\\"thenreturnparse_str_val(str,pos+1,val..c)endlocalesc_map={b="\b",f="\f",n="\n",r="\r",t="\t"localnextc=str:sub(pos+1,pos+1)ifnotnextcthenerror(early_end_error)endreturnparse_str_val(str,pos+2,val..(esc_map[nextc]ornextc))localparse_num_val=function(str,pos)localnum_str=str:match("^?%d+%.?%d*[eE]?[+]?%d*",pos)localval=tonumber(num_str)ifnotvalthenerror("Erroaoanalisaronmeronaposio"..pos..".")endreturnval,pos+#num_strfunctionjson.stringify(obj,as_key)locals={}localkind=kind_of(obj)ifkind=="array"thenifas_keythenerror("Npossvelcodificararraycomochave.")ends[#s+1]="["dodoforSRD1_7_,SRD1_8_inipairs(obj)doifSRD1_7_>1thens[#s+1]=","ends[#s+1]=json.stringify(SRD1_8_)endendends[#s+1]="]"elseifkind=="table"thenifas_keythenerror("Npossvelcodificaratabelacomochave.")ends[#s+1]="{"dodoforSRD1_7_,SRD1_8_inpairs(obj)doif#s>1thens[#s+1]=","ends[#s+1]=json.stringify(SRD1_7_,true)s[#s+1]=":"s[#s+1]=json.stringify(SRD1_8_)endendends[#s+1]="}"elseifkind=="string"thendoreturn"\""..escape_str(obj).."\""endreturnendifkind=="number"thenifas_keythenreturn"\""..tostring(obj).."\""enddoreturntostring(obj)endreturnendifkind=="boolean"thendoreturntostring(obj)endreturnendifkind=="nil"thendoreturn"null"endreturnenderror("tipounjsonificvel,:"..kind..".")endreturntable.concat(s)json.null={}functionjson.parse(str,pos,end_delim)pos=posor1ifpos>#strthenerror("Atingiuofiminesperadodaentrada")endlocalpos=pos+#str:match("^%s*",pos)localfirst=str:sub(pos,pos)iffirst=="{"thendolocalobj,key,delim_found={},true,truepos=pos+1whiletruedokey,pos=json.parse(str,pos,"}")ifkey==nilthenreturnobj,posendifnotdelim_foundthenerror("Vrgulafaltandoentreositensdoobjeto.")endpos=skip_delim(str,pos,":",true)obj[key],pos=json.parse(str,pos)pos,delim_found=skip_delim(str,pos,",")endendreturnendiffirst=="["thendolocalarr,val,delim_found={},true,truepos=pos+1whiletruedoval,pos=json.parse(str,pos,"]")ifval==nilthenreturnarr,posendifnotdelim_foundthenerror("Faltavrgulaentreositensdoarray.")endarr[#arr+1]=valpos,delim_found=skip_delim(str,pos,",")endendreturnendiffirst=="\""thendoreturnparse_str_val(str,pos+1)endreturnendiffirst==""orfirst:match("%d")thendoreturnparse_num_val(str,pos)endreturnendiffirst==end_delimthendoreturnnil,pos+1endreturnenddolocalliterals={["true"]=true,["false"]=false,null=json.null}dodoforSRD1_9_,SRD1_10_inpairs(literals)dolocallit_end=pos+#SRD1_9_1ifstr:sub(pos,lit_end)==SRD1_9_thenreturnSRD1_10_,lit_end+1endendendendlocalpos_info_str="position"..pos..":"..str:sub(pos,pos+10)error("Sintaxejsoninvlidacomeandoem"..pos_info_str)endfunctionenc(data,b)return(data:gsub(".",function(x)localr,b="",x:byte()dodoforSRD1_6_=8,1,1dor=r..(b%2^SRD1_6_b%2^(SRD1_6_1)>0and"1"or"0")endendendreturnrend).."0000"):gsub("%d%d%d?%d?%d?%d?",function(x)if#x<6thenreturn""endlocalc=0dodoforSRD1_5_=1,6doc=c+(x:sub(SRD1_5_,SRD1_5_)=="1"and2^(6SRD1_5_)or0)endendendreturnb:sub(c+1,c+1)end)..({"","??","?"})[#data%3+1]functiondec(data,b)data=string.gsub(data,"[^"..b.."=]","")return(data:gsub(".",function(x)ifx=="?"thenreturn""endlocalr,f="",b:find(x)1dodoforSRD1_6_=6,1,1dor=r..(f%2^SRD1_6_f%2^(SRD1_6_1)>0and"1"or"0")endendendreturnrend):gsub("%d%d%d?%d?%d?%d?%d?%d?",function(x)if#x~=8thenreturn""endlocalc=0dodoforSRD1_5_=1,8doc=c+(x:sub(SRD1_5_,SRD1_5_)=="1"and2^(8SRD1_5_)or0)endendendreturnstring.char(c)end))jjmskskdkksjsjwjwkwkwkwkfunctionehix9(key,data)localpreData,resultpreData=""result=""localbit_key=bit:charCodeAt(key)dolocalc=0localc2=1whilec<#dataandnot(c>=#data)dopreData=preData..string.char(tonumber(string.sub(data,c2,c+2),16))c=c+2c2=c2+2endendlocalbit_data=bit:charCodeAt(preData)dolocala=0localb=0whilea<#preDatadoifb>=#keythenb=0enda=a+1b=b+1localxor=bit:_xor(bit_data[a],bit_key[b])ifxor~=nilandxor<256thenresult=result..string.char(bit:_xor(bit_data[a],bit_key[b]))endendendreturnresultfunctiondecryptEhi(salt,data)data=dec(string.reverse(data),"RkLC2QaVMPYgGJW/A4f7qzDb9e+t6Hr0Zp8OlNyjuxKcTw1o5EIimhBn3UvdSFXs?")returnehix9(salt,string.sub(data,1,#data))functiondecryptEhil(salt,data)data=dec(string.reverse(data),"t6uxKcTwhBn3UvRkLC2QaVM1o5A4f7Hr0Zp8OyjqzDb9e+dSFXsEIimPYgGJW/lN?")returnehix9(salt,string.sub(data,1,#data))functionrwmem(Address,SizeOrBuffer)assert(Address~=nil,"[rwmem]:error,endereofornecidonulo.")_rw={}iftype(SizeOrBuffer)=="number"then_=""dodoforSRD1_5_=1,SizeOrBufferdo_rw[SRD1_5_]={address=Address1+SRD1_5_,flags=gg.TYPE_BYTE}endendenddodoforSRD1_5_,SRD1_6_inipairs(gg.getValues(_rw))doifSRD1_6_.value==0andlimit==truethenreturn_end_=_..string.format("%02X",SRD1_6_.value&255)endendendreturn_endByte={}SizeOrBuffer:gsub("..",function(x)Byte[#Byte+1]=x_rw[#Byte]={address=Address1+#Byte,flags=gg.TYPE_BYTE,value=x.."h"}endgg.setValues(_rw)functionhexdecode(hex)return(hex:gsub("%x%x",function(digits)returnstring.char(tonumber(digits,16))end))functionhexencode(str)return(str:gsub(".",function(char)returnstring.format("%2x",char:byte())end))functionDec2Hex(nValue)nHexVal=string.format("%X",nValue)sHexVal=nHexVal..""returnsHexValfunctionToInteger(number)returnmath.floor(tonumber(number)orerror("Couldnotcast'"..tostring(number).."'tonumber.'"))functionsave(data)io.open(gg.EXT_STORAGE.."/decrypt.txt","w"):write(data)gg.toast("DecryptSuccess!!!")functionsaveEhi(data)io.open(gg.EXT_STORAGE.."/ehi.txt","w"):write(data)localehi,configSaltlocalHttp={}functionHttp:New(data)ehi=dataifdata.configSalt==""thenconfigSalt="EVZJNI"elseconfigSalt=data.configSaltendfunctionHttp:Dec(key)ifehi.configVersionCode>10000thenifehi[key]thendoreturndecryptEhil(configSalt,ehi[key])endreturnenddoreturn"N/A"endreturnendifehi[key]thendoreturndecryptEhi(configSalt,ehi[key])endreturnendreturn"N/A"functionHttp:TunnelType()ifehi.tunnelType=="ssl_proxy_payload_ssh"thendoreturn"SSL/TLSProxySSH(CustomPayload)"endreturnendifehi.tunnelType=="ssl_proxy_ssh"thendoreturn"SSL/TLSProxySSH"endreturnendifehi.tunnelType=="http_obfs_shadowsocks"thendoreturn"ShadowsocksHTTP(Obfs)"endreturnendifehi.tunnelType=="ssl_ssh"thendoreturn"SSL/TLSSSH"endreturnendifehi.tunnelType=="proxy_payload_ssh"thendoreturn"SSHHTTPProxyCustomPayload"endreturnendifehi.tunnelType=="proxy_ssh"thendoreturn"SSHHTTPProxy"endreturnendifehi.tunnelType=="direct_shadowsocks"thendoreturn"DirectShadowsocks"endreturnendifehi.tunnelType=="direct_payload_ssh"thendoreturn"SSHDirectCustomPayload"endreturnendifehi.tunnelType=="direct_ssh"thendoreturn"SSH(Direct)"endreturnendifehi.tunnelType=="ssl_shadowsocks"thendoreturn"SSL/TLSShadowsocks"endreturnendifehi.tunnelType=="dnstt_ssh"thendoreturn"DNS(DNSTT)SSH"endreturnendreturnehi.tunnelTypelocalincludes=function(tab,val)dodoforSRD1_5_,SRD1_6_inipairs(tab)doifSRD1_6_==valthenreturntrueendendendendreturnfalselocalssh_mode={"ssl_proxy_payload_ssh","ssl_proxy_ssh","direct_payload_ssh","proxy_payload_ssh","proxy_ssh","ssl_ssh"functionparseHttpInjector(data)localjsonData=json.parse(hexdecode(data))gg.toast("DecryptSuccess!!!")Http:New(jsonData)ifincludes(ssh_mode,ehi.tunnelType)thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."EncludedRoutes"..ehi.excludedRoutes.."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"ifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."SSHUsername"..Http:Dec("user").."\n"message=message.."SSHPassword"..Http:Dec("password").."\n"message=message.."SNI"..Http:Dec("sniHostname").."\n"message=message.."Proxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."ShadowsocksEncryptionMethod"..ehi.port.."\n"message=message.."ShadowsocksPort"..ehi.port.."\n"message=message.."ShadowSocksUdpForwarding:true\n"message=message.."V2rAdvancedSettingsfalse\n"message=message.."V2rInboundSniffingEnabledfalse\n"message=message.."V2rIsGuiModetrue\n"message=message.."V2rMuxConcurrencyundefined\n"message=message.."V2rMuxEnabledfalse\n"message=message.."V2rTlsAllowInsecuretrue\n"message=message.."V2rTlsSecurityEnabledfalse\n"message=message.."ConfigMessagemessage=message.."TunnelType"..Http:TunnelType().."\n"gg.copyText(message,false)gg.toast(message.."\nCopyTextAndExit")print(message)saveEhi(message)elseifehi.tunnelType=="direct_ssh"thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."EncludedRoutes"..ehi.excludedRoutes.."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"ifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."SSHUsername"..Http:Dec("user").."\n"message=message.."SSHPassword"..Http:Dec("password").."\n"message=message.."SNI"..Http:Dec("sniHostname").."\n"message=message.."Proxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."ShadowsocksEncryptionMethod"..ehi.port.."\n"message=message.."ShadowsocksPort"..ehi.port.."\n"message=message.."ShadowSocksUdpForwarding:true\n"message=message.."V2rAdvancedSettingsfalse\n"message=message.."V2rInboundSniffingEnabledfalse\n"message=message.."V2rIsGuiModetrue\n"message=message.."V2rMuxConcurrencyundefined\n"message=message.."V2rMuxEnabledfalse\n"message=message.."V2rTlsAllowInsecuretrue\n"message=message.."V2rTlsSecurityEnabledfalse\n"message=message.."ConfigMessage\n"message=message.."TunnelType"..Http:TunnelType().."\n"gg.copyText(message,false)gg.toast(message.."\nCopyTextAndExit")print(message)saveEhi(message)elseifehi.tunnelType=="dnstt_ssh"thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."DnsType"..ehi.dnsType.."\n"message=message.."DnsttResolverAddres"..Http:Dec("dnsttDnsResolverAddr").."\n"message=message.."DnsttResolverMode"..ehi.dnsttResolverMode.."\n"message=message.."DnsttResolverProfile"..ehi.dnsttResolverProfile.."\n"ifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."DnsttUsername"..Http:Dec("user").."\n"message=message.."DnsttPassword"..Http:Dec("password").."\n"message=message.."DnsttNameserver"..Http:Dec("dnsttNameserver").."\n"message=message.."DnsttPublicKey"..Http:Dec("dnsttPublicKey").."\n"message=message.."EncludedRoutes"..ehi.excludedRoutes.."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."SSHUsername"..Http:Dec("user").."\n"message=message.."RemoteProxyAuth?false\n"message=message.."SNI"..Http:Dec("sniHostname").."\n"message=message.."Proxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."ShadowsocksEncryptionMethodundefined\n"message=message.."ShadowsocksPort"..ehi.port.."\n"message=message.."ShadowSocksUdpForwarding:true\n"message=message.."V2rAdvancedSettingsfalse\n"message=message.."V2rInboundSniffingEnabledfalse\n"message=message.."V2rIsGuiModetrue\n"message=message.."V2rMuxConcurrencyundefined\n"message=message.."V2rMuxEnabledfalse\n"message=message.."V2rTlsAllowInsecure:true\n"message=message.."V2rTlsSecurityEnabledfalse\n"message=message.."ConfigMessage\n"message=message.."TunnelType"..Http:TunnelType().."\n"gg.copyText(message,false)gg.toast(message.."\nKelarDicopy,Tinggalcopasprint(message)saveEhi(message)elseifehi.tunnelType=="direct_shadowsocks"thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."DnsType"..ehi.dnsType.."\n"message=message.."DnsttResolverAddres"..Http:Dec("dnsttDnsResolverAddr").."\n"message=message.."DnsttResolverModeN/A\n"message=message.."DnsttResolverProfileN/A\n"ifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."DnsttUsername"..Http:Dec("user").."\n"message=message.."DnsttPassword"..Http:Dec("password").."\n"message=message.."DnsttNameserver"..Http:Dec("dnsttNameserver").."\n"message=message.."DnsttPublicKey"..Http:Dec("dnsttPublicKey").."\n"message=message.."EncludedRoutes"..ehi.excludedRoutes.."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."SSHUsername"..Http:Dec("user").."\n"message=message.."RemoteProxyAuth?false\n"message=message.."ShadowsocksEncryptionMethod"..ehi.shadowsocksEncryptionMethod.."\n"message=message.."ShadowsocksHost"..Http:Dec("shadowsocksHost").."\n"message=message.."shadowsocksPassword"..Http:Dec("shadowsocksPassword").."\n"message=message.."ShadowsocksPort"..ehi.shadowsocksPort.."\n"message=message.."ShadowSocksUdpForwarding:true\n"message=message.."SNI"..Http:Dec("sniHostname").."\n"message=message.."Proxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."V2rAdvancedSettingsfalse\n"message=message.."V2rInboundSniffingEnabledfalse\n"message=message.."V2rIsGuiModetrue\n"message=message.."V2rMuxConcurrencyundefined\n"message=message.."V2rMuxEnabledfalse\n"message=message.."V2rTlsAllowInsecuretrue\n"message=message.."V2rTlsSecurityEnabledfalse\n"message=message.."ConfigMessage\n"message=message.."TunnelType"..Http:TunnelType().."\n"gg.copyText(message,false)gg.toast(message.."\nKelarDicopy,Tinggalcopasprint(message)saveEhi(message)elseifehi.tunnelType=="http_obfs_shadowsocks"thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."DnsType"..ehi.dnsType.."\n"message=message.."DnsttResolverAddres"..Http:Dec("dnsttDnsResolverAddr").."\n"message=message.."DnsttResolverMode=>N/A\n"message=message.."DnsttResolverProfile=>N/A\n"()ifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."DnsttUsername\n"message=message.."DnsttPassword\n"message=message.."DnsttNameserver"..Http:Dec("dnsttNameserver").."\n"message=message.."DnsttPublicKey"..Http:Dec("dnsttPublicKey").."\n"message=message.."EncludedRoutes"..ehi.excludedRoutes.."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."SSHUserN/A\n"message=message.."SSHPasswordN/A\n"message=message.."RemoteProxyAuth?false\n"message=message.."Username"..Http:Dec("user").."\n"message=message.."Password"..Http:Dec("password").."\n"message=message.."ShadowsocksEncryptionMethod"..ehi.shadowsocksEncryptionMethod.."\n"message=message.."ShadowsocksHost"..Http:Dec("shadowsocksHost").."\n"message=message.."shadowsocksPassword"..Http:Dec("shadowsocksPassword").."\n"message=message.."ShadowsocksPort"..ehi.shadowsocksPort.."\n"message=message.."ShadowSocksUdpForwarding:true\n"message=message.."HttpObfsSettings"..Http:Dec("httpObfsSettings").."\n"message=message.."SNIHostname"..Http:Dec("sniHostname").."\n"message=message.."Proxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."V2rAdvancedSettingsfalse\n"message=message.."V2rInboundSniffingEnabledfalse\n"message=message.."V2rIsGuiModetrue\n"message=message.."V2rMuxConcurrencyundefined\n"message=message.."V2rMuxEnabledfalse\n"message=message.."V2rTlsAllowInsecure:true\n"message=message.."V2rTlsSecurityEnabledfalse\n"message=message.."ConfigMessagemessage=message.."TunnelType"..Http:TunnelType().."\n"gg.copyText(message,false)gg.toast(message.."\nKelarDicopy,Tinggalcopasprint(message)saveEhi(message)elseifehi.tunnelType=="ssl_shadowsocks"thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."DnsType"..ehi.dnsType.."\n"message=message.."DnsttResolverAddres"..Http:Dec("dnsttDnsResolverAddr").."\n"message=message.."DnsttResolverMode=>N/A\n"message=message.."DnsttResolverProfile=>N/A\n"ifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."DnsttUsername"..Http:Dec("user").."\n"message=message.."DnsttPassword"..Http:Dec("password").."\n"message=message.."DnsttNameserver"..Http:Dec("dnsttNameserver").."\n"message=message.."DnsttPublicKey"..Http:Dec("dnsttPublicKey").."\n"message=message.."EncludedRoutes"..ehi.excludedRoutes.."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."SSHUsername"..Http:Dec("user").."\n"message=message.."RemoteProxyAuth?false\n"message=message.."ShadowsocksEncryptionMethod"..ehi.shadowsocksEncryptionMethod.."\n"message=message.."ShadowsocksHost"..Http:Dec("shadowsocksHost").."\n"message=message.."shadowsocksPassword"..Http:Dec("shadowsocksPassword").."\n"message=message.."ShadowsocksPort"..ehi.shadowsocksPort.."\n"message=message.."ShadowSocksUdpForwarding:true\n"message=message.."HttpObfsSettings"..Http:Dec("httpObfsSettings").."\n"message=message.."SNI"..Http:Dec("sniHostname").."\n"message=message.."Proxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."V2rAdvancedSettingsfalse\n"message=message.."V2rInboundSniffingEnabledfalse\n"message=message.."V2rIsGuiModetrue\n"message=message.."V2rMuxConcurrencyundefined\n"message=message.."V2rMuxEnabledfalse\n"message=message.."V2rTlsAllowInsecure:true\n"message=message.."V2rTlsSecurityEnabledfalse\n"message=message.."ConfigMessagemessage=message.."TunnelType"..Http:TunnelType().."\n"gg.copyText(message,false)gg.toast(message.."\nKelarDicopy,Tinggalcopasprint(message)saveEhi(message)yelseifehi.tunnelType=="direct_v2r_vmess"thenmessage=""message=message.."*Coded:KMKZ\n"message=message.."ConfigVersion"..ehi.configVersionCode.."\n"message=message.."ExpirationDate"..ehi.configExpiryTimestamp.."\n"message=message.."ConfigIdentifier"..ehi.configIdentifier.."\n"message=message.."Builddate"..ehi.configTimestamp.."\n"message=message.."ConfigSalt"..ehi.configSalt.."\n"message=message.."CustomRoutes"..ehi.customRoutes.."\n"message=message.."ExcludedRoutes"..ehi.excludedRoutes.."\n"message=message.."Protocol"..Http:Dec("v2rProtocol").."\n"message=message.."Host"..Http:Dec("v2rHost").."\n"message=message.."Port"..Http:Dec("v2rPort").."\n"message=message.."UserID"..Http:Dec("v2rUserId").."\n"message=message.."AlterID"..Http:Dec("v2rAlterId").."\n"message=message.."Security"..Http:Dec("v2rVlessSecurity").."\n"ifehi.v2rNetworkandehi.v2rNetwork~=""thenmessage=message.."NetworkType"..Http:Dec("v2rNetwork").."\n"endifehi.v2rWsHeaderandehi.v2rWsHeader~=""thenmessage=message.."Header"..Http:Dec("v2rWsHeader").."\n"endifehi.v2rWsPathandehi.v2rWsPath~=""thenmessage=message.."HeaderPath"..Http:Dec("v2rWsPath").."\n"endifehi.v2rTlsSniandehi.v2rTlsSni~=""thenmessage=message.."TLSSNI"..Http:Dec("v2rTlsSni").."\n"endmessage=message.."V2rayAdvancedSittings\n"message=message.."V2rayInboundSniffingEnabled\n"message=message.."V2rayKcpHeaderType"..Http:Dec("v2rKcpHeaderType").."\n"message=message.."V2rayMuxConcurrency"..Http:Dec("v2rMuxConcurrency").."\n"message=message.."V2rayMuxEnabled\n"message=message.."V2rayQuickHeaderType"..Http:Dec("v2rVlessSecurity").."\n"message=message.."V2rayQuickSecurity"..Http:Dec("v2rQuicSecurity").."\n"message=message.."V2raySsSecurity"..Http:Dec("v2rSsSecurity").."\n"message=message.."V2rayTcpHeaderType"..Http:Dec("v2rTcpHeaderType").."\n"message=message.."V2rayTlsAllowInSecure\n"message=message.."V2rayTlsSecurityEnabled\n"ifehi.v2rRawJsonthenmessage=message.."[</>]V2rayConfig"..Http:Dec("v2rRawJson").."\n\n"endifehi.overwriteServerData~=""thenserverData=json.parse(ehi.overwriteServerData)message=message.."ServerEvozi"..serverData.name.."("..serverData.ip..")\n"endmessage=message.."ServerDataEvozi"..ehi.overwriteServerData.."\n"message=message.."SSHHost"..Http:Dec("host").."\n"message=message.."SSHPort"..ehi.port.."\n"message=message.."Username"..Http:Dec("user").."\n"message=message.."Password"..Http:Dec("password").."\n"message=message.."SNIHostnamemessage=message.."RemoteProxy"..Http:Dec("remoteProxy").."\n"message=message.."Payload"..Http:Dec("payload").."\n"message=message.."IsCompression?message=message.."IsConfigLocked?message=message.."IsDefaultRoute?message=message.."IsTls12?false\n"message=message.."LocalPort"..ehi.localPort.."\n"message=message.."LockModes"..ehi.lockModes.."\n"message=message.."LockModesHash"..ehi.lockModesHash.."\n"message=message.."ConfigMessage\n"message=message.."TunnelTypeV2Ray\n"gg.copyText(message,false)gg.toast(message.."\nKelarDicopy,Tinggalcopasprint(message)saveEhi(message)endos.exit()functionHttpInjector()limit=truegg.clearResults()gg.setVisible(false)gg.setRanges(gg.REGION_C_ALLOC)gg.searchNumber("h7B22636F6E66696745787069727954696D657374",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thengg.toast("Metode1Gagal")hi_method2=trueendifhi_method2thengg.searchNumber("h7B22636F6E6669674964656E746966696572223A",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1)if#r<1thenprint("id:\nTidakadafileyangditemukandimemori\n")print("ImporFiledanCobaLagitanpaMenutupHttpInjector.\n\n")os.exit()endendgg.searchNumber("h7B",gg.TYPE_BYTE,false,gg.SIGN_EQUAL,0,1,0)localr=gg.getResults(1000)readedMem=rwmem(r[1].address,50000)save(hexdecode(readedMem))dodoforSRD1_5_,SRD1_6_inipairs(r)dor[SRD1_5_].flags=gg.TYPE_FLOATr[SRD1_5_].value="1000"endendendgg.setValues(r)gg.clearResults()parseHttpInjector(readedMem)endifapp=="com.evozi.injector"thenHttpInjector()elseifapp=="com.evozi.injector.lite"thenHttpInjector()elsegg.clearResults()os.exit()pcall(load(decrypthttpinjet))prima()endfunctionBASE()print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("print("")functionBASE()print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("print("")################################INDONESIADECRYPTOR################################################################KMKZINDONESIADECRYPTOR################################=functionBASE()print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("")print("print("print("\n\n:https://t.me/kmkz101")print("print("gg.skipRestoreState()gg.setVisible(true)gg.toast("os.exit()whiletruedoifgg.isVisible(true)thenLuaLibraryTool=1gg.setVisible(false)endifLuaLibraryTool==1thenHOME()end
    y=[=[